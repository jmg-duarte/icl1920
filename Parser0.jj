PARSER_BEGIN(Parser)

package parser;

import java.util.Map;
import java.util.HashMap;

import ast.*;
import compiler.*;
import env.*;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
    Environment globalScope = new Environment();
    while (true) {
        try {
            exp = parser.Start();
            CoreCompiler c = new CoreCompiler(exp);
            c.compile(exp);
            System.out.println( exp.eval(globalScope) );
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println ("Syntax Error!");
            parser.ReInit(System.in);
        }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
    < LET: "let" >
  | < IN: "in" >
  | < END: "end" >
  | <COMMA: "," >
  | < Num: (["0"-"9"]) + >
  | < PLUS : "+" >
  | < MINUS : "-">
  | < TIMES : "*">
  | < DIV : "/">
  | < LPAR : "(" >
  | < RPAR : ")" >
  | < EL: "\n" >
  | < EQUALS: "=" >
  | < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}

ASTNode Start(): { 
  ASTNode t; 
} {
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
    t1=Term() (
    ( op=<PLUS> | op=<MINUS> ) t2=Term()
        { t1 = new ASTBinaryOp(op.image, t1, t2); }
    ) *
    {return t1;}
}

ASTNode Term() :
{ Token op;
  ASTNode t1, t2; }
{
    t1=UnaryExp() (
        ( op=<TIMES> | op=<DIV> ) t2=UnaryExp() {
            t1 = new ASTBinaryOp(op.image, t1, t2);
            }
        ) *
    { return t1; }
}


ASTNode UnaryExp() :
{  Token op;
   ASTNode t1; }
{
    ( (op = <MINUS> | op = <PLUS>) t1 = UnaryExp()
        { t1 = new ASTUnaryOp(op.image, t1); }
    | t1 = Fact()
    )
    { return t1; }
}

ASTNode Fact() :  {
    Token n;
    ASTNode t;}
{
   ( n=<Num> {t = new ASTNum(Integer.parseInt(n.image));}
   | t = Id()
   | t = Let()
   | <LPAR> t=Exp() <RPAR>
   )
   { return t; }
}



ASTNode Id() : {
    Token id;
} {
    id = <Id> { return new ASTId(id.image); }
}

ASTNode Let() : {
    Token id;
    ASTNode expression;
    ASTNode body;
    Map<String, ASTNode> expressions = new HashMap<String, ASTNode>();
} {
    <LET> id=<Id> <EQUALS> expression=Exp()
        {expressions.put(id.image,expression);}
        (<COMMA> id=<Id> <EQUALS> expression=Exp()
        {
            if (expressions.put(id.image,expression) != null) {
                throw new RuntimeException("duplicate assignment");
            }
        } )*
         <IN> body=Exp() <END>
    {
        return new ASTLetIn(expressions, body);
    }
}
