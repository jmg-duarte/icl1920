PARSER_BEGIN(Parser)

package parser;

import java.util.*;

import ast.*;
import ast.types.*;
import compiler.*;
import env.*;
import types.*;

/** ID lister. */
public class Parser{}
PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
    < LET: "let" >
  | < IN: "in" >
  | < END: "end" >
  | < NEW: "new" >
  | < IF: "if" >
  | < THEN: "then" >
  | < ELSE: "else">
  | < WHILE: "while" >
  | < FUNC: "fun" >
  | < DO: "do" >
  | < INT: "int" >
  | < BOOLEAN: "bool">
  | < REF : "ref">
  | < BOOL: ("true" | "false") >
  | < NOT: "~">
  | < AND: "&&" >
  | < OR: "||">
  | < COMMA: "," >
  | < Num: (["0"-"9"]) + >
  | < PLUS : "+" >
  | < EQ : "==" >
  | < DF : "!=" >
  | < ARROW : "->" >
  | < MINUS : "-">
  | < GT: ">" >
  | < GE: ">=" >
  | < LT : "<" >
  | < LE : "<=" >
  | < COL : ":" >
  | < DIV : "/">
  | < TIMES : "*">
  | < LPAR : "(" >
  | < RPAR : ")" >
  | < EL: ";;" >
  | < SEQ:  ";" >
  | < EQUALS: "=" >
  | < DEREF: "!" >
  | < ASSIGN: ":=" >
  | < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}

ASTNode Start(): {
  ASTNode t;
} {
   t = Expression() <EL>
   { return t; }
}

ASTNode Expression() : {
    ASTNode head, tail;
} {
    head = Assign() (
        <SEQ> tail = Assign()
            {head = new ASTSequence(head, tail);}
        )*
    { return head; }
}

ASTNode Assign() : {
    ASTNode left, right;
} {
    left = BooleanOr() (
        <ASSIGN> right = BooleanOr()
            {left = new ASTAssign(left, right);}
        )*
    { return left; }
}

ASTNode BooleanOr() :
{ ASTNode exp1, exp2;}
{
    exp1=BooleanAnd() (
        <OR> exp2=BooleanAnd()
            { exp1 = new ASTBooleanOp("||", exp1, exp2); }
        ) *
        {return exp1;}
}

ASTNode BooleanAnd() :
{ ASTNode exp1, exp2; }
{
    exp1=Equals() (
        <AND> exp2=Equals()
            { exp1 = new ASTBooleanOp("&&", exp1, exp2); }
        ) *
        {return exp1;}
}

ASTNode Equals() : {
    Token op;
    ASTNode left, right;
} {
    left=Comparison() (
        (op = <EQ> | op = <DF>) right = Comparison()
        {left = new ASTEquality(op.image, left, right);}
    ) *
    {return left;}
}

ASTNode Comparison() :
{ Token op; ASTNode exp1, exp2;
} {
    exp1=Exp() (
        (op=<LT> | op=<GT> | op=<GE> | op=<LE>) exp2=Exp()
        { exp1 = new ASTComparisonOp(op.image, exp1, exp2); }
    ) *
    {return exp1;}
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
    t1=Term() (
    ( op=<PLUS> | op=<MINUS> ) t2=Term()
        { t1 = new ASTBinaryOp(op.image, t1, t2); }
    ) *
    {return t1;}
}

ASTNode Term() :
{ Token op;
  ASTNode t1, t2; }
{
    t1=UnaryExp() (
        ( op=<TIMES> | op=<DIV> ) t2=UnaryExp() {
            t1 = new ASTBinaryOp(op.image, t1, t2);
            }
        ) *
    { return t1; }
}


//TODO por isto dentro do fact ??
ASTNode UnaryExp() :
{  Token op;
   ASTNode t1; }
{
    ( (op = <MINUS> | op = <PLUS>) t1 = UnaryExp()
        { t1 = new ASTUnaryOp(op.image, t1); }
    | t1 = FunApplication()
    )
    { return t1; }
}

//TODO subir isto para o lado do assign
ASTNode FunApplication() : {
    ASTNode node;
    List<ASTNode> args;}
{
    node=Fact() ((args=FuncArgs()
        {node = new ASTFuncApp(node, args);}
    )+)?
    {return node;}
}

ASTNode Fact() :  {
    Token n;
    ASTNode t;
} {
   ( n=<Num> {t = new ASTNum(Integer.parseInt(n.image));}
   | <NEW> t = Fact() { t = new ASTNew(t); }
   | <NOT> t = Fact() { t = new ASTNot(t); }
   | <DEREF> t = Fact() { t = new ASTDeref(t); }
   | t = Bool()
   | t = Let()
   | t = If()
   | t = While()
   | t = Func()
   | t = Id()
   | <LPAR> t = Expression() <RPAR>
   )
   { return t; }
}


ASTNode Id() : {
    Token id;
} {
    id = <Id> { return new ASTId(id.image); }
}

ASTNode Bool() : {
    Token bool;
} {
    bool = <BOOL> {
        switch(bool.image) {
            case "true": return ASTBool.True();
            case "false": return ASTBool.False();
        }
    }
}

ASTNode If() : {
    ASTNode exp1;
    ASTNode exp2;
    ASTNode exp3;
   } {
        <IF> exp1 = Expression() <THEN> exp2 = Expression() <ELSE> exp3 = Expression() <END>
        {return new ASTIf(exp1, exp2, exp3);}
}


ASTNode While() : {
    ASTNode exp1;
    ASTNode exp2;
    } {
    <WHILE> exp1 = Expression() <DO> exp2 = Expression() <END>
    {return new ASTWhile(exp1, exp2);}
}

ASTNode Func() : {
    Token id;
    Map<String, ASTNode> parameters = new HashMap<String, ASTNode>();
    ASTNode body; ASTNode type;
} {
    <FUNC> id=<Id> <COL> type=Type() { parameters.put(id.image, type); }
    (<COMMA> id=<Id> <COL> type=Type() { parameters.put(id.image, type); })*
    <ARROW> body = Expression() <END>
    {
    return new ASTFunc(parameters, body);
    }
}

ASTNode Type(): {
    List<ASTNode> paramsTypes = new LinkedList<ASTNode>();
    ASTNode type;
    Token t;
}{
  ( t = <INT>   {type = new ASTIntType();}
  | t = <BOOLEAN>  {type = new ast.types.ASTBoolType();}
  | t = <REF> type=Type()  {type = new ASTRefType(type);}
  | t = <LPAR> type=Type() {paramsTypes.add(type);} (<COMMA> type=Type() {paramsTypes.add(type);})* <RPAR> type=Type() {type = new ASTFunType(paramsTypes,type);}
  )
  {return type;}
}

List<ASTNode> FuncArgs() : {
    ASTNode expr;
    List<ASTNode> args = new LinkedList<ASTNode>();
} {
    <LPAR> expr=Expression() {args.add(expr);} ( <COMMA> expr=Expression() {args.add(expr);} )* <RPAR>
    {return args;}
}


ASTNode Let() : {
    Token id;
    ASTNode expression;
    ASTNode body;
    ASTNode type;
    Map<String, ASTNode> types = new LinkedHashMap<String, ASTNode>();
    Map<String, ASTNode> expressions = new LinkedHashMap<String, ASTNode>();
} {
    <LET> id=<Id> <COL> type=Type() <EQUALS> expression=Expression()
        {expressions.put(id.image,expression); types.put(id.image, type);}
        (id=<Id> <COL> type=Type() <EQUALS> expression=Expression()
        {
            if (expressions.put(id.image,expression) != null) {
                throw new RuntimeException("duplicate assignment");
            }
            types.put(id.image, type);
        } )*
         <IN> body=Expression() <END>
    {
        return new ASTLetIn(expressions, body, types);
    }
}
